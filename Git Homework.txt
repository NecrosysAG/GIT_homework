1. Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?

Сначала убедится, что мы находимся в рабочей директории репозитория GIT.
Затем используйте команду "GIT STATUS", чтобы увидеть список всех измененных файлов в вашей рабочей директории.
Выбераем файл или файлы,в которых мы хотим отменить изменения, и запускаем команду "GIT CHECKOUT" <имя файла> для каждого файла, например: git checkout homework.txt
Если мы хотим отменить изменения во всех файлах, используем команду "GIT CHECKOUT . "(с точкой в конце), чтобы отменить изменения во всех файлах в текущей директории.

2. Как вернуть файл из индекса в рабочий каталог?

Выбераем файл или файлы, которые мы хотим вернуть в рабочий каталог, и запускаем команду "GIT RESET" <имя файла>, например: git reset homework.txt
Если vы хотbv вернуть все файлы из индекса в рабочий каталог, использetv команду "GIT RESET "без указания имени файла: git reset

3. Как отменить ошибочный commit ?

Команда "GIT REVERT" позволяет откатить коммит в GIT, создав новый коммит, который отменяет изменения, внесенные в оригинальный коммит. Это делает процесс отмены коммита более безопасным, чем использование команды "GIT RESET", так как он не удаляет историю изменений, а создает новый коммит, который отменяет изменения, внесенные в старый коммит.

4. Как создать новую ветку и переключится в нее?

Выполняем  команду "git checkout -b" <название новой ветки>, чтобы создать новую ветку и переключиться на нее. Например: git checkout -b new_feature_branch

5. В чем отличение между fast-forward merge  and non fast-forfard merge?

Fast-forward (--ff)
Fast-forward merge когда текущая ветка не имеет дополнительных коммитов по сравнению с веткой, которую мы мержим. Git у нас ленив и сначала попытается выполнить самый простой вариант: Fast-forward! Этот тип мержа не создает новый коммит, а скорее объединяет коммит(ы) в ветку, которую мы объединяем прямо в текущей ветке.
Т.е., основная идея в использовании fast forward git-ом – это “не плодить лишних сущностей”.

Опция --no-ff(Обработка ошибок не быстрого перемещения) .Другими словами - цель и задача этого коммита только в информировании о слиянии веток.

6. Когда может возникнуть конфликт слияния веток, как  его разрешить?

Конфликт слияния веток может возникнуть когда два или более разработчиков вносили изменения в один и тот же файл в разных ветках или когда были сделаны параллельные изменения в одном и том же файле.

Конфликт слияния веток можно решить следующим образом:

a) Командой git status смотрим какие файлы содержат конфликты слияния
b)Читаем пометки сделанные GIT-ом в этих файлах
c)Вносим нужные изменения в каждый файл (сохранение нужных изменений и удаление ненужных)
d)Выполняем команду git add <имя файла>, чтобы пометить файл как разрешенный конфликт.

7. Можно ли удалить ветку? Как? 

Да, можно удалить ветку в Git. Для этого нужно использовать команду git branch -d <имя ветки>. Например, если вы хотите удалить ветку с именем "homework", то нужно выполнить следующую команду: git branch -d homework
Эта команда удалит ветку "homework" из локального репозитория Git.

Если мы хотим удалить ветку из удаленного репозитория, то нужно использовать команду git push <удаленный репозиторий> --delete <имя ветки>. Например, если мы хотим удалить ветку "homework" из удаленного репозитория с именем "origin", то нужно выполнить следующую команду: git push origin --delete homework















